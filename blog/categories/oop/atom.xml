<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oop | axiac@web]]></title>
  <link href="http://axiac.github.io/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://axiac.github.io/"/>
  <updated>2020-08-23T12:40:37+03:00</updated>
  <id>http://axiac.github.io/</id>
  <author>
    <name><![CDATA[axiac]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>



  <entry>
    <title type="html"><![CDATA[Public Properties Are Not OOP]]></title>
    <link href="http://axiac.github.io/blog/public-properties-are-not-oop/"/>
    <updated>2016-10-15T17:56:57+03:00</updated>
    <id>http://axiac.github.io/blog/public-properties-are-not-oop</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Object-oriented_programming#Encapsulation">Encapsulation</a> is one fundamental concept of object-oriented programming. It refers to
the bundling of data with the methods that operate on that data. Encapsulation is used to hide the values
or state of a structured data object inside a class, preventing unauthorized parties' direct access to them.</p>

<p>That&rsquo;s it, the object properties (and some of its methods) should be <code>private</code> (or, sometimes, <code>protected</code>)
and not <code>public</code>.</p>

<!-- more -->


<p>Let&rsquo;s see an example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">();</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">John</span> <span class="nx">Doe</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">age</span>  <span class="o">=</span> <span class="mi">45</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Name</span><span class="o">:</span> <span class="o">%</span><span class="nx">s</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="o">%</span><span class="nx">d\n</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">age</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The code above uses the keyword <em>&ldquo;class&rdquo;</em> and because of that, according to many developers, it is
object-oriented code. In fact, it is pure procedural code.</p>

<p>Let&rsquo;s put it side-by-side against the same code written in <a href="https://en.wikipedia.org/wiki/C_(programming_language)"><em>C</em></a>, a procedural language that
<strong>does not</strong> provide any object-oriented feature.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="sr">/&lt;strong&gt; &amp;ldquo;Object-oriented&amp;rdquo; PHP code */</span>         <span class="o">|</span>      <span class="err">/&lt;/strong&gt; Procedural C code &lt;em&gt;/</span>
</span><span class='line'>                                          <span class="o">|</span>
</span><span class='line'>                                          <span class="o">|</span>      <span class="err">#</span><span class="nx">include</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">stdlib</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>
</span><span class='line'>                                          <span class="o">|</span>      <span class="err">#</span><span class="nx">include</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">stdio</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>
</span><span class='line'>                                          <span class="o">|&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">User</span> <span class="p">{</span>                              <span class="o">|</span>      <span class="nx">typedef</span> <span class="nx">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">$name</span><span class="p">;</span>                         <span class="o">|</span>          <span class="kr">char</span> <span class="o">&lt;</span><span class="err">/em&gt;name;</span>
</span><span class='line'>    <span class="kr">public</span> <span class="nx">$age</span><span class="p">;</span>                          <span class="o">|</span>          <span class="kr">int</span> <span class="nx">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>                                         <span class="o">|</span>      <span class="p">}</span> <span class="nx">User</span><span class="p">;</span>
</span><span class='line'>                                          <span class="o">|</span>
</span><span class='line'>                                          <span class="o">|</span>      <span class="kr">int</span> <span class="nx">main</span><span class="p">()</span>
</span><span class='line'>                                          <span class="o">|</span>      <span class="p">{</span>
</span><span class='line'><span class="nx">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">();</span>                       <span class="o">|</span>          <span class="nx">User</span> <span class="o">*</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">malloc</span><span class="p">(</span><span class="nx">sizeof</span><span class="p">(</span><span class="nx">User</span><span class="p">));</span>
</span><span class='line'><span class="nx">$user</span><span class="o">-&gt;</span><span class="nx">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">John</span> <span class="nx">Doe</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>                 <span class="o">|</span>          <span class="nx">user</span><span class="o">-&gt;</span><span class="nx">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">John</span> <span class="nx">Doe</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="nx">$user</span><span class="o">-&gt;</span><span class="nx">age</span>  <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>                         <span class="o">|</span>          <span class="nx">user</span><span class="o">-&gt;</span><span class="nx">age</span>  <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>
</span><span class='line'>                                          <span class="o">|&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="nx">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Name</span><span class="o">:</span> <span class="o">%</span><span class="nx">s</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="o">%</span><span class="nx">d</span><span class="err">\</span><span class="nx">n</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>             <span class="o">|</span>          <span class="nx">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Name</span><span class="o">:</span> <span class="o">%</span><span class="nx">s</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="o">%</span><span class="nx">d</span><span class="err">\</span><span class="nx">n</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span>
</span><span class='line'>               <span class="nx">$user</span><span class="o">-&gt;</span><span class="nx">name</span><span class="p">,</span> <span class="nx">$user</span><span class="o">-&gt;</span><span class="nx">age</span><span class="p">);</span>  <span class="o">|</span>                         <span class="nx">user</span><span class="o">-&gt;</span><span class="nx">name</span><span class="p">,</span> <span class="nx">user</span><span class="o">-&gt;</span><span class="nx">age</span><span class="p">);</span>
</span><span class='line'>                                          <span class="o">|</span>
</span><span class='line'>                                          <span class="o">|</span>          <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                                          <span class="o">|</span>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Letting apart the inherent differences due to syntax, can you spot any difference of style in the two fragments above?
I cannot.</p>

<p>It is the same code, procedural beyond a shadow of a doubt.
<br>Case closed.</p>

<hr />

<p><em>Addendum:</em> There are cases when public properties are the way to go. I&rsquo;ll write about them in a future post.</p>

<p></p>
]]></content>
  </entry>

</feed>

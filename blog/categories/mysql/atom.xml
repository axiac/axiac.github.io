<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | axiac@web]]></title>
  <link href="http://axiac.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://axiac.github.io/"/>
  <updated>2020-08-23T12:40:37+03:00</updated>
  <id>http://axiac.github.io/</id>
  <author>
    <name><![CDATA[axiac]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>



  <entry>
    <title type="html"><![CDATA[Why Is MySQL Time Limited to 838:59:59?]]></title>
    <link href="http://axiac.github.io/blog/why-is-mysql-time-limited-to-838-59-59/"/>
    <updated>2017-07-28T00:00:00+03:00</updated>
    <id>http://axiac.github.io/blog/why-is-mysql-time-limited-to-838-59-59</id>
    <content type="html"><![CDATA[<p>An interesting question from <a href="https://stackoverflow.com/q/39259910/4265352">Stack Overflow</a> asks <em>&ldquo;Why is MySQL&rsquo;s maximum time limit 838:59:59?&rdquo;</em></p>

<p>The official reference at <a href="http://dev.mysql.com/doc/refman/5.7/en/time.html">http://dev.mysql.com/doc/refman/5.7/en/time.html</a> says</p>

<blockquote><p><code>TIME</code> values may range from <code>-838:59:59</code> to <code>838:59:59</code>. The hours part may be so large
because the <code>TIME</code> type can be used not only to represent a time of day (which must be
less than 24 hours), but also elapsed time or a time interval between two events
(which may be much greater than 24 hours, or even negative).</p></blockquote>

<p>The <code>TIME</code> values were always stored on 3 bytes in MySQL. But the format changed on <a href="http://dev.mysql.com/doc/internals/en/date-and-time-data-type-representation.html">version 5.6.4</a>.</p>

<!-- more -->


<p>I suspect this was not the first time when it changed. But the other change, if there was one, happened
long time ago and there is no public evidence of it. The MySQL source code history on GitHub starts with
version 5.5 (the oldest commit is from May 2008) but the change I am looking for happened somewhere
around 2001-2002. The first stable release of MySQL 4 (version 4.0.4) was launched in September 2002.</p>

<h3>How the <code>TIME</code> values are stored since version 5.6.4</h3>

<p>The current format, as described in the <a href="http://dev.mysql.com/doc/refman/5.7/en/time.html">documentation</a>, uses the 24 bits as follows:</p>

<ul>
<li>6 bits for seconds (possible values: <code>0</code> to <code>63</code>);</li>
<li>6 bits for minutes (again, possible values: <code>0</code> to <code>63</code>);</li>
<li>10 bits for hours (possible values: <code>0</code> to <code>1023</code>);</li>
<li>1 bit for sign;</li>
<li>1 bit is unused and labelled <em>&ldquo;reserved for future extensions&rdquo;</em>.</li>
</ul>


<p>It is optimized for working with time components (hours, minutes, seconds) and it doesn&rsquo;t waste much space.
Using this format it&rsquo;s possible to store values between <code>-1023:59:59</code> and <code>+1023:59:59</code>.
However MySQL limits the number of hours to <code>838</code>, probably for backward compatibility with applications
that were written a while ago, when I think <code>838</code> hours was the upper limit.</p>

<h3>The format of <code>TIME</code> before version 5.6.4</h3>

<p>Until version 5.6.4, the <code>TIME</code> values were also stored on 3 bytes and the components were packed as
<code>days * 24 * 3600 + hours * 3600 + minutes * 60 + seconds</code>.<br>
This format was optimized for working with timestamps (because it was, in fact, a timestamp).
Using this format it would be possible to store values in the range of about <code>-2330</code> to <code>+2330</code> hours.</p>

<p>I think this format was introduced in MySQL 4.</p>

<p>While having this big range of values available, MySQL was still limiting the values to <code>-838</code> to <code>+838</code> hours
for compatibility with applications developed on MySQL 3.</p>

<h3>The format of <code>TIME</code> before MySQL 4</h3>

<p>There was <a href="https://bugs.mysql.com/bug.php?id=11655">bug #11655</a> on MySQL 4. It was possible to return <code>TIME</code> values outside the <code>-838..+838</code>
range using nested <code>SELECT</code> statements. It was not a feature but a bug and it was fixed.</p>

<p>The only reason to limit the values to this range and to actively change any piece of code that produces
<code>TIME</code> values outside it was backward compatibility.</p>

<p>I suspect MySQL 3 used a different format that, due to the way the data was packed,
limited the valid values to the range <code>-838..+838</code> hours.</p>

<p>By looking into the current <a href="https://github.com/mysql/mysql-server/blob/5.7/include/my_time.h#L94">MySQL&rsquo;s source code</a> I found this interesting formula:</p>

<pre><code>#define TIME_MAX_VALUE (TIME_MAX_HOUR*10000 + TIME_MAX_MINUTE*100 + TIME_MAX_SECOND)
</code></pre>

<p>Let&rsquo;s ignore for the moment the <em><code>MAX</code></em> part of the names used above and let&rsquo;s remember only that
<code>TIME_MAX_MINUTE</code> and <code>TIME_MAX_SECOND</code> are numbers between <code>00</code> and <code>59</code>.
The formula just concatenates the hours, minutes and seconds in a single integer number.<br>
For example, the value <code>170:29:45</code> becomes <code>1702945</code>.</p>

<p>This formula raises the following question: given that the <code>TIME</code> values are stored on 3 bytes with sign,
what is the maximum positive value that can be represented this way?</p>

<p>The maximum value that can be stored on 3 digits with sign is <code>0x7FFFFF</code> that in decimal notation is <code>8388607</code>.
Since the last four digits (<code>8607</code>) should be read as minutes (<code>86</code>) and seconds (<code>07</code>) and their maximum
valid value is <code>59</code>, the greatest value that can be stored on 3 bytes with sign using the formula above is <code>8385959</code>.
Which, as <code>TIME</code> is <code>+838:59:59</code>. Ta-da!</p>

<p>Guess what? The fragment of <code>C</code> code listed above was extracted from:</p>

<p><figure class='code'><figcaption><span>my_time.h <a href="https://github.com/mysql/mysql-server/blob/5.7/include/my_time.h#L90">https://github.com/mysql/mysql-server/blob/5.7/include/my_time.h#L90</a> See the file on Github </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Limits</span> <span class="k">for</span> <span class="n">the</span> <span class="n">TIME</span> <span class="n">data</span> <span class="n">type</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">TIME_MAX_HOUR</span> <span class="mi">838</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">TIME_MAX_MINUTE</span> <span class="mi">59</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">TIME_MAX_SECOND</span> <span class="mi">59</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">TIME_MAX_VALUE</span> <span class="p">(</span><span class="n">TIME_MAX_HOUR</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">10000</span> <span class="o">+</span> <span class="n">TIME_MAX_MINUTE</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">100</span> <span class="o">+</span> <span class="n">TIME_MAX_SECOND</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now I am sure this is how MySQL 3 used to keep the <code>TIME</code> values internally. This format imposed the limitation
of the range, and the backward compatibility requirement on the subsequent versions propagated
the limitation to our days.</p>

<p></p>
]]></content>
  </entry>


  <entry>
    <title type="html"><![CDATA[DISTINCT vs. GROUP BY WITH ROLLUP]]></title>
    <link href="http://axiac.github.io/blog/distinct-with-rollup/"/>
    <updated>2015-04-18T00:00:00+03:00</updated>
    <id>http://axiac.github.io/blog/distinct-with-rollup</id>
    <content type="html"><![CDATA[<h1>or why 2+2 is not always 4.</h1>

<p><code>WITH ROLLUP</code> is a <a href="http://dev.mysql.com/doc/refman/5.7/en/group-by-modifiers.html"><code>GROUP BY</code> modifier</a> that causes extra rows to be added to
the result set produced by the query. These rows represent higher-level (or super-aggregate)
summary operations.</p>

<p>A shallow examination of the effects of <code>WITH ROLLUP</code> on a query like:</p>

<pre><code>SELECT user_id, COUNT(product) AS nb_products, SUM(amount) AS total FROM cart GROUP BY user_id
</code></pre>

<p>can lead to the erroneous conclusion that the <code>WITH ROLLUP</code> modifier is just a courtesy
of the database implementors to the front-end developers and the extra rows added by it
could be computed on the client-side as well. Big mistake!</p>

<!-- more -->


<p>A deeper investigation on the <a href="http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html"><code>GROUP BY</code> aggregate functions</a> reveals that there are
functions whose values generated by <code>WITH ROLLUP</code> <strong>cannot</strong> be computed on the client side
using only the values returned by the <code>GROUP BY</code> query. These are the statistical functions
(<a href="http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_stddev-pop"><code>STDDEV_POP()</code></a>, <a href="http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_var-pop"><code>VAR_POP()</code></a> a.s.o.) that are not used by many applications
but, surprisingly, also the more commonly used <a href="http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_sum"><code>SUM()</code></a> and <a href="http://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_count"><code>COUNT()</code></a>,
when they are combined with <code>DISTINCT</code>.</p>

<h3>Case Study</h3>

<p>Let&rsquo;s create a small MySQL table in the database and put some rows in it:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">INT</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">UNSIGNED</span> <span class="k">NOT</span> <span class="no">NULL</span> <span class="kp">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">INT</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">DATE</span> <span class="k">NOT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">browser</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">browser</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Firefox</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">02</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Firefox</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">02</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Chrome</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Chrome</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">02</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Chrome</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It is a naïve log table that stores the customer login dates and the browsers they are using.</p>

<p>Let&rsquo;s count the number of logins for each day:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="nf">COUNT</span><span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">nb</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">WITH</span> <span class="n">ROLLUP</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The result is straightforward:
<div class="highlight"><pre><code class="language-text" data-lang="text">+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;-+
| date       | nb |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;-+
| 2015-04-01 |  2 |
| 2015-04-02 |  3 |
| NULL       |  5 |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;-+
3 rows in set (0.01 sec)</code></pre></div></p>

<p>The <code>WITH ROLLUP</code> clause produced a nice total and doesn&rsquo;t provide any surprise: <code>2 + 3 = 5</code>,
any first-grade child can assure you about the correctness of this result.</p>

<h3>Where <code>DISTINCT</code> comes into play</h3>

<p>Now, let&rsquo;s take a look to the raw table data and we&rsquo;ll discover that on <code>2015-04-02</code>
the first user logged in twice using two different browsers. Let&rsquo;s change the query
to count the unique users for each day, i.e. count the first user only once for <code>2015-04-02</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="nf">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">nb</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">WITH</span> <span class="n">ROLLUP</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;-+
| date       | nb |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;-+
| 2015-04-01 |  2 |
| 2015-04-02 |  2 |
| NULL       |  3 |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;-+
3 rows in set (0.00 sec)</code></pre></div></p>

<p>Surprise, surprise! We have <code>2</code> unique visitors for each of the two days and a big total of <code>3</code>
which is not quite the calculation one would expect.</p>

<p>Sure, going back to the raw table data we can see there are only <code>3</code> unique values for <code>user_id</code>
in the table and that makes it impossible to return <code>4</code> or more as the result of <code>COUNT(DISTINCT)</code>.
This is easy to see at a glance on our example table but not that easy on a production table that
contains thousands or millions of records.</p>

<h2>When 2+2 equals 3</h2>

<p>In order to find out and understand why MySQL returns this result let&rsquo;s
analyze how <code>GROUP BY</code>, <code>WITH ROLLUP</code> and <code>DISTINCT</code> work.</p>

<p>Let&rsquo;s find out what rows are selected in each of the queries above. This can be done
easily by removing (commenting out) the <code>GROUP BY</code> clause (together with its
<code>WITH ROLLUP</code> modifier) and removing the aggregate function <code>COUNT()</code>. I also added the
<code>PK</code> field to easily identify the rows in our table and <code>ORDER BY</code> to easily identify
the groups.</p>

<h3>All values (without <code>DISTINCT</code>)</h3>

<h4><code>GROUP BY</code></h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">+&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
| id | date       | user_id |
+&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
|  1 | 2015-04-01 |       1 |
|  4 | 2015-04-01 |       2 |
+&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
|  2 | 2015-04-02 |       1 |
|  3 | 2015-04-02 |       1 |
|  5 | 2015-04-02 |       3 |
+&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
5 rows in set (0.00 sec)</code></pre></div></p>

<p>No surprise here, the query returns all the rows from the table. We can see there
are 2 entries having <code>date = '2015-04-01'</code> and 3 entries with <code>date = '2015-04-02'</code>.
Grouping by <code>date</code>, rows 1 and 4 are the first group, rows 2, 3 and 5 are the second
group.</p>

<h4><code>WITH ROLLUP</code></h4>

<p>The <code>WITH ROLLUP</code> modifier computes an extra row that is some kind of super-group.
It aggregates all the rows returned by the query above, creating a single group, behaving
like all the rows had the same value in the <code>date</code> column. There are 5 rows in the set,
this is why the extra row generated by <code>WITH ROLLUP</code> has value <code>5</code> in the <code>nb</code> column.</p>

<p>We can simulate the computation of the extra row by running a modified version of the
query (without the <code>WITH ROLLUP</code> modifier) that selects <code>NULL</code> for the <code>date</code> column;
this makes the <code>GROUP BY</code> clause create a single big group.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="no">NULL</span> <span class="k">AS</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">null</span><span class="n">_date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="nf">COUNT</span><span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">nb</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">null</span><span class="n">_date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><em>We cannot use <code>date</code> as the name of the selected expression because it will conflict
with the table column <code>date</code> and <code>GROUP BY `date`</code> will use the table column instead.</em></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;-+
| null_date | nb |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;-+
|      NULL |  5 |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;-+
1 row in set (0.00 sec)</code></pre></div></p>

<h3>Asking for <code>DISTINCT</code> values</h3>

<h4><code>GROUP BY</code></h4>

<p>Let&rsquo;s try now to figure out what rows are used to compute the result set when the
original query contains <code>COUNT(DISTINCT `user_id`)</code>.</p>

<p>For that we need to add the <code>DISTINCT</code> modifier to the <code>SELECT</code> clause and drop out
the <code>PK</code> column because it guarantees all the rows are distinct and defeats the purpose
of our query (we are interested only in distict combinations of <code>date</code> and <code>user_id</code>).</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The rows selected for grouping are:
<div class="highlight"><pre><code class="language-text" data-lang="text">+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
| date       | user_id |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
| 2015-04-01 |       1 |
| 2015-04-01 |       2 |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
| 2015-04-02 |       1 |
| 2015-04-02 |       3 |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+
4 rows in set (0.00 sec)</code></pre></div></p>

<p>The PK column is not there but we can guess the missing row has <code>id</code> = 3 or <code>id</code> = 2
(it does not really matter). These two rows have identical values on the <code>date</code> and
<code>user_id</code> fields. The <code>DISTINCT</code> modifier guarantees only one of them is selected
for further processing by the query.</p>

<p>There are 2 groups, each of them having exactly 2 rows. This is consistent with the
result returned by the <code>GROUP BY</code> query.</p>

<h4><code>WITH ROLLUP</code></h4>

<p>If we replace the values of the <code>date</code> column with <code>NULL</code>s in the result set above
we will see there are only 3 distinct rows (out of 4).</p>

<p>Let&rsquo;s use the same trick as above to simulate what <code>WITH ROLLUP</code> does.
The modified query is:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="no">NULL</span> <span class="k">AS</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">null</span><span class="n">_date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span> <span class="nf">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">nb</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">logins</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">null</span><span class="n">_date</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The result:
<div class="highlight"><pre><code class="language-text" data-lang="text">+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;-+
| null_date | nb |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;-+
|      NULL |  3 |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;-+
1 row in set (0.00 sec)</code></pre></div></p>

<p>Again, the result matches the value returned by MySQL.</p>

<h2>Conclusion</h2>

<p>In order to compute the extra rows added by the <code>WITH ROLLUP</code> modifier, MySQL <strong>does not</strong> use
the rows already computed for the <code>GROUP BY</code> query without rollup. In some cases they can be
used but many times they cannot. This makes the correct computation of the summary rows impossible
on the client side (without getting the raw rows, which defeats the entire purpose of using
<code>GROUP BY</code> in the first place).</p>

<p></p>
]]></content>
  </entry>

</feed>

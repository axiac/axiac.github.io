<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Osx | axiac@web]]></title>
  <link href="https://axiac.ro/blog/categories/osx/atom.xml" rel="self"/>
  <link href="https://axiac.ro/"/>
  <updated>2020-08-23T12:40:37+03:00</updated>
  <id>https://axiac.ro/</id>
  <author>
    <name><![CDATA[axiac]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>



  <entry>
    <title type="html"><![CDATA[Atlassian SourceTree and Git hooks]]></title>
    <link href="https://axiac.ro/blog/atlassian-sourcetree-and-git-hooks/"/>
    <updated>2016-04-18T15:56:40+03:00</updated>
    <id>https://axiac.ro/blog/atlassian-sourcetree-and-git-hooks</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/sismo-sourcetree.png" alt="" style="float: right; margin-left: 50px;" />
This article explains how I made <code>Sismo</code> work with Atlassian <code>SourceTree</code> on <code>OSX</code>. First I thought it doesn&rsquo;t work
out-of-the-box because of a <code>$PATH</code> problem but soon it turned out that the biggest issue comes from the command line
used for integration. Keep reading to learn how I found it out and how easy is to fix it.</p>

<!-- more -->


<h3>The actors</h3>

<p><strong><a href="http://sourcetreeapp.com">Atlassian SourceTree</a></strong> is a GUI for Git and Mercurial that runs on Windows and OSX. It covers most of the basic VCS
workflow; it provides a handy button that opens a command line console in the work tree directory, allowing the user
to type the advanced commands it doesn&rsquo;t provide. All in all, it is a good tool for the daily needs of any developer
regarding the source code versioning.</p>

<p><strong><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hooks</a></strong> are a nice way to enhance the behaviour of Git. The pre-commit hooks can be used
to verify the shape of the code before committing the changes (can run the tests, verify the formatting etc).
The post-commit hook can be used to send notification emails, to trigger project builds on the continuous
integration server and so on.</p>

<p><strong><a href="http://sismo.sensiolabs.org">Sismo</a></strong> is a <em>continuous testing server</em> published by Fabien Potencier (the creator of <a href="http://symfony.com">Symfony</a>).
It is small (everything is packed in a single PHP file that can run both as CLI and as web page), it is fast
and dumb-easy to configure.</p>

<h3>The play</h3>

<p>I&rsquo;m working with Git and SourceTree for years. Sismo joined the group last week and making it work standalone
was <a href="http://www.quotationspage.com/quote/237.html">as easy as taking candy from a baby</a>. I created a project and put <code>composer; phpunit</code> in the list of
commands to be run by <code>Sismo</code> when I ask it to build the project.</p>

<p>The next step was to install it as a <code>post-commit</code> hook, in order to run it every time I create a new commit.
The <a href="http://sismo.sensiolabs.org">Sismo project page</a> explains how to integrate it into the Git workflow by launching it<a href="#note1"><sup>1</sup></a>
from the <code>post-commit</code> git hook:</p>

<p><figure class='code'><figcaption><span>.git/hooks/post-commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;php /path/to/sismo.php <span class="p">&amp;</span>ndash<span class="p">;</span>quiet build symfony-local &lt;code&gt;git log -1 HEAD --pretty<span class="o">=</span><span class="s2">&quot;%H&quot;</span>&lt;/code&gt; <span class="p">&amp;</span>amp<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<hr />

<p><a name="note1"><sup>1</sup></a> At the time of this writing, the command displayed on the project&rsquo;s page
incorrectly escapes the backticks, making <code>Sismo</code> reject it because the incorrect number of arguments.
I posted it here in the correct form (that runs). It&rsquo;s possible that it was fixed in the meantime in the
official documentation too.</p>

<h3>The intrigue</h3>

<p>It works well when I use Git from the command line. However, it fails with <code>command not found</code> errors
when I commit using SourceTree. Putting <code>echo $PATH</code> as the first command for the project
in <code>~/.sismo/config.php</code> revealed that it cannot find <code>composer</code> because it is not in the path known by
SourceTree. This happens because SourceTree uses the system environment while the environment of my
<code>bash</code> command line (and of the programs launched by it) is enhanced with paths and aliases in <code>~/.bashrc</code>.</p>

<h3>One (partial) resolution</h3>

<p>In order to debug the problem easier and get a solution that can be applied to all my projects easily,
I moved the code from <code>.git/hooks/post-commit</code> into a separate script (I named it <code>sismo-git-post-commit</code>).
This way, the Git post-commit hook contains a simple call of this external script that receives the Sismo
project name as argument. All the setup needed to make Sismo work when it is invoked through SourceTree
(and all future corrections and improvements) require changing a single file (and not every project).</p>

<p>Since <code>~/.bashrc</code> is read only by <code>bash</code> I had to explicitly call <code>Sismo</code> through <code>bash</code>. This can be done
by prependind the above Sismo command line with <code>bash</code>. It still doesn&rsquo;t work this way because, as <code>man bash</code>
states:</p>

<blockquote><p>When <code>bash</code> is started non-interactively, to run a shell script, for example,
it looks for the variable <code>BASH_ENV</code> in the environment, expands its value if it appears there, and
uses the expanded value as the name of a file to read and execute.</p></blockquote>

<p>I modified <code>bin/sismo-git-post-commit</code> to launch <code>Sismo</code> using <code>bash</code> and provide it the correct path to <code>.bashrc</code>
in <code>BASH_ENV</code>:</p>

<p><figure class='code'><figcaption><span>~/bin/sismo-git-post-commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">BASH_ENV</span><span class="o">=</span>~/.bashrc bash ~/bin/sismo <span class="p">&amp;</span>ndash<span class="p">;</span>quiet build <span class="nv">$PROJECT</span> <span class="k">$(</span>git log -1 HEAD <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nv">pretty</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>%H<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="k">)</span> <span class="p">&amp;</span>amp<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><em>(If you have noticed that <code>$PROJECT</code> is undefined then please also notice that this is line #9 of the script.
I have chosen to show only the relevant part here. Keep reading for the complete script.)</em></p>

<p>It was still working fine using the command line <code>git</code> and it started working when I committed the code
using <code>SourceTree</code>. It seemed I solved the problem and it was the time to move on.</p>

<p>But something wasn&rsquo;t working as it used to work before. Committing using <code>SourceTree</code> used to complete in
a snap. Now it seemed sluggish. And it felt like this because <strong>it was</strong> sluggish.</p>

<h3>Further investigation</h3>

<p>I suspected that, even if Sismo runs in the background, for some reason SourceTree waits until it completes.
It&rsquo;s not Git the one that produces the delay; it worked fine when I used <code>git commit</code> from the command line.</p>

<p>The execution of <code>sismo build</code> takes some time, depending on the size of the project and the commands used
to build it. Mine were pretty light, that&rsquo;s why I added <code>sleep 5</code> as the first build command for the project.
The next two commits, one from the command line, the other using <code>SourceTree</code> revealed the truth: SourceTree
indeed waits for the <code>sismo</code> command to complete before it closes the &ldquo;Committing&rdquo; console. The command line
<code>git commit</code> still completes in a snap, without any additional delay.</p>

<p>I scratched my head and suddenly it dawned to me: when it launches Git in the background to process the commit,
SourceTree connects to Git&rsquo;s standard output through a pipe in order to get and display in the &ldquo;Committing&rdquo;
console whatever output Git might produce. Git launches the hook, the hook launches <code>sismo</code> in background but
none of them close their <code>stdout</code> (they don&rsquo;t have any reason to do it) and because of inheritance, all
their standard output streams remain connected with SourceTree through the pipe.</p>

<p>Even if <code>sismo-git-post-commit</code> doesn&rsquo;t produce any output (the <code>--quiet</code> option of <code>sismo</code> takes care of that),
the pipe remains open until all the processes attached to it on the other end complete. SourceTree remains
connected to it, dutifully waiting for some <code>git</code> output to present to the user.</p>

<p>To verify this assumption I replaced <code>--quiet</code> with <code>--verbose</code> (to force <code>sismo</code> produce a lot of output)
and I configured SourceTree to always open the console when it runs the Git commands in background and
<em>voilà!</em> All the output produced by <code>sismo</code> is there, after the 5 seconds delay.</p>

<h3>The epilogue</h3>

<p>At this point, everything was clear and the fix was straight forward. After I removed all the debug code
all I had to do was to disconnect from the pipe the <code>stdout</code> and <code>stderr</code> of the <code>sismo</code> instance
launched in background. This can be easily accomplished by redirecting them to <code>/dev/null</code>.</p>

<p>The commit hook and the script it uses now look like this:</p>

<p><figure class='code'><figcaption><span>.git/hooks/post-commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;~/bin/sismo-git-post-commit project-name <span class="p">&amp;</span>amp<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>~/bin/sismo-git-post-commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PROJECT<span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$PROJECT</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Missing project name.<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;BASH_ENV<span class="o">=</span>~/.bashrc bash ~/bin/sismo <span class="p">&amp;</span>ndash<span class="p">;</span>quiet build <span class="nv">$PROJECT</span> <span class="k">$(</span>git log -1 HEAD <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nv">pretty</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>%H<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="k">)</span> &gt;/dev/null 2&gt;<span class="p">&amp;</span>amp<span class="p">;</span><span class="m">1</span> <span class="p">&amp;</span>amp<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Remarks</h3>

<p>A very helpful tool for debugging the problem was the shell redirection of standard output (and error) streams
of the <code>sismo</code> command to a file. Together with the <code>--verbose</code> option it allowed me to see what happened
under the hood when the things doesn&rsquo;t work as expected (in the first part).</p>

<p></p>
]]></content>
  </entry>

</feed>
